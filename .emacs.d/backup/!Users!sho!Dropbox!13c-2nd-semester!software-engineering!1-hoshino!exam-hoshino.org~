* ターゲット
- 過去問!!
  - 1番
    → これは全体像が把握できているかの問題だね
  - 2番解けるようにならないと…
    - → これはフレームワーク（各工程での「うまい」考え方）が出来ているかの問題っぽいな
    - 工程って言っても、主に問われるのは要求分析定義と設計だよね

- フェーズ毎の行動＝何をするか
- ライフサイクルの各ステップについて、説明できることを増やしまくる

- レジュメ
  - 赤字参考にする?
  - 「試験出ます」発言、無かったっけ…？

- 教科書
  - 練習問題付いてる
    - 3章4章は回答あり
  - 太字参考にする?

* todo
- まず大きな話を

- (各ステップで発生する) ドキュメント
  - 何を書くか
  - どのような注意が必要か

  - 項目追いきれてない

- プロセス
  - agile
  - スパイラルモデル、あり得るなー…

- 7回目「ビジネス創出」...
  - レジュメ#3の後半にもある 

- 具体的な話
  - [ ] **モデル
  - [ ] UMLの**図
  ↓
  - [ ] それぞれがどの局面で用いられるのか

* これ、何の話?
- 複数人でひとつのソフトを作る

* 構造化/オブジェクト指向

| 構造化                   | オブジェクト指向               |
|--------------------------+--------------------------------|
| 機能                     | オブジェクト                   |
| 機能にデータがやってくる | オブジェクトにメッセージが届く |
|                          |                                |

* 第1章 ソフトウェア工学概観
** ソフトウェア工学の目的・目標 ==> ソフトウェアの生産性および品質の向上
- これらはトレードオフ

** ソフトウェア工学には直交する3つの軸がある
*** ライフサイクル (この教科書で扱う一番大きな軸)
- 要求分析・定義 ★2回
- 設計 ★2回
- プログラミング ★1回
- テスト
- 保守

- プロセス(全体像) ★ 1回

*** プロダクト（生産物時代の構成や構造がどうあるべきか）・プロセス（それを作る過程）

*** モデル（一般論）・その適用方法・支援するツール

** 対象とするソフトウェア ==> 情報システム・組み込みシステム
- 情報システム (この講義の主眼)
- 組み込みシステム

* レジュメ #2

* 構造化**とオブジェクト指向**

| 構造化               | オブジェクト指向       |
|----------------------+------------------------|
| 機能中心のアプローチ | データ中心のアプローチ |
|                      |                        |

* 第2章 プログラミング
** 構造化プログラミング
*** プロダクト
- 制御構造 (プログラム)
  - ブロックに分割
    - 逐次
    - 選択
    - 反復
  - あるブロックとその縦横の隣接関係だけを注視した理解の積み上げで全体をカバーできる

- データ構造 (データ)
  - 配列
  - 構造体

*** プロセス
- *段階的詳細化*
  - *疑似プログラミング*

** モジュール化プログラミング (機能抽象 手続き抽象)
構造化の単位を大きくする

名前付けと引数だけ見える
(プログラムの中身はブラックボックス)

** オブジェクト指向プログラミング (データ抽象)
データの使い方だけを表に見せる
(データ構造の実装はブラックボックス)

* 第3章 要求と分析
要求獲得 -> 要求記述(シナリオ) -> 分析と仕様化(構造化,オブジェクト志向,形式的記述)

** 3.1 要求獲得 (システム化対象項目=具体的な1機能 を決定する ツリーの末端に出てくる)
- 開発者はドメイン知識について詳しくない

*** 現行システム分析
*** 問題点分析・ニーズ分析 (戦術的・技術的)
*** 目的展開 (戦略的)
この2項、要するにツリーを作りましょうって話?
*** 意思決定

** 3.2 要求記述
*** (振る舞いを) シナリオ (として記述)

↓
*** 非形式的な自然言語 -> 形式的な記述 (=? 仕様)
- 箱と線の図をよく使う

- 仕様
  - 抜けが無い
  - 曖昧でない
  - 無矛盾
*** 
- 要求
  - 機能要求 (この章の以下のスコープ
  - 非機能要求・品質要求

** 3.3 構造化分析とその仕様化
*** データフローモデル
データの流れ
データをどの機能が処理するか (それからどの機能に渡すか?)
*** 状態遷移モデル
状態の導入
その機能がいつ働くのかタイミングが分かる
*** 実体関連モデル

** オブジェクト指向分析とその仕様化
*** UML
- 構造図
  - システムに含まれる要素の静的な（時間に依存しない）構造
  ==> クラス図

- 振る舞い図
  - システムに含まれる要素の動的な（時間に応じて変化する）構造
  ==> ユースケース図
  ==> 状態機械図

- 相互作用図
  - 要素間のデータや制御のやり取り
  ==> シーケンス図

** 形式的仕様記述

* 第4章 ソフトウェア設計
- 要求を実現するソフトウェアをどのような構成にするか決める
- 構成の各部に要求の各部をいかに割り付けるか決める

** 4.1 設計とは何か
*** 要求と設計
| 要求                         | 設計                                             |
|------------------------------+--------------------------------------------------|
| 何を作るか                   | どう作るか                                       |
|------------------------------+--------------------------------------------------|
| 顧客・ユーザーから見える外部 | ソフトウェアの内部                               |
|------------------------------+--------------------------------------------------|
| 発注仕様書                   | 外部設計仕様書(概略設計)                         |
|                              | 内部設計仕様書(詳細設計)                         |
|                              |                                                  |
| 契約における合意文書         | 発注仕様書を受けて                               |
|                              | どのように実装するかを開発者に指示するための文書 |

*** 設計と構築段階
| 設計 | 構築段階                                             |
|------+------------------------------------------------------|
| 仕様 | プログラムやスクリプト(実際にコンピュータを動かせる) |

*** 
両者に近いふたつのステップに分かれる


|                        | [作業の段階]                     |     | [作業の段階]                     |
|                        | 概略設計 = アーキテクチャ設計    | '=> | 詳細設計                         |
|                        | (全体構造)                       |     | (コンポーネントの振舞い)         |
|------------------------+----------------------------------+-----+----------------------------------|
| [個別]                 |                                  |     |                                  |
| 対象設計               | (4.2) 要求割付け                 |     | (4.3) 構造化設計 =? 機能志向設計 |
| (与えられた要求に依存) |                                  |     | (4.4) オブジェクト指向設計       |
|------------------------+----------------------------------+-----+----------------------------------|
| [一般][メタな話]       |                                  |     |                                  |
| パターン設計           | (4.5) ソフトウェアアーキテクチャ |     | (4.6) デザインパターン           |
| (便利な考え方?)        |                                  |     | (4.7) フレームワーク             |

	
** 4.2 要求割り付け (対象設計 - アーキテクチャ設計)

|          | 論理               | 物理           |
|          | 要求分析と重なる   | 設計に特有     |
|----------+--------------------+----------------|
| 静的構造 | 機能とデータの構造 | システムの構成 |
| 動的構造 | プロセスの構造     | システムの配置 |

*** 機能とデータの構造
- e.g. 実体関連モデル (構造化分析)
- e.g. クラス図、パッケージ図 (オブジェクト指向分析)

*** プロセス(対象システムの動作の実行単位)の構造
- e.g. データフローモデル (構造化分析)
- e.g. コミュニケーション図 (オブジェクト指向分析)

*** システムの構成
- UML コンポーネント図
- パッケージ図?

*** システムの配置
- UML 配置図

* 『実施計画書』
** 書く事
*** 「技術」開発に対する記述
- 技術的裏付け、あるいはアピールにもなる
- 開発予算
  - 人件費
    - 読み間違えると大変
- 人間が見て分かりやすいレベルで
  - x 変数名

*** 「技術開発の成果を活用したソフトウェア」開発に対する記述
- こういう機能を分割して、こういう手順で開発します

* 『発注仕様書』『要求仕様書』
- 契約
  - 受注者には、作業結果に対して、完成責任・納期遅れに対する責任・瑕疵担保責任が生じる
  - 明確に規定された文書 (トレーサビリティ)
  - ここに書かれた内容と納品物件の内容が一致していなければならない

- 機能の記述
  - 外部仕様を記述する
  - 機能の記述（こういうことができる）と要件の記述（こういう制約のもとで動く）
  - 各段階で3つずつ程度に分ける(大項目→中項目→)

* 『外部設計仕様書』
- ユーザーの立場から見た設計
  - 何を入力すれば、そのような出力が、どのようなタイミングで帰ってくるか
  - アプリケーションと外部環境とのインタフェース
  - 機能ブロックに分割
  - 機能ブロック間のインタフェース

- (内部設計仕様書と合わせて)プログラム製造工程への主要な入力

- 発注仕様書に追加して…
  - 入出力仕様
  - データファイル仕様
  - データベースの設計

- 設計指針
  - 一貫した記述形式
  - 『なぜ』そのようにしたのか

* 『内部設計仕様書』
- 開発者の立場でソフトウェアの機能を定義
- コーディングの指針

- 外部設計 → 機能ブロックに展開
- 内部設計 → これらの機能を、プログラム、サブプログラムという処理単位に構造か


|                | 機能                       | 追跡可能性 | 試験           |
|----------------+----------------------------+------------+----------------|
| 発注仕様書     | 大、中項目の機能の記述・要件  |            | 検収(納品物件) |
| 外部設計仕様書 | 大、中項目の機能ブロック   | 上をカバー | 総合試験       |
| 内部設計仕様書 | プログラム、サブプログラム | 上をカバー | 結合試験       |

- トレーサビリティ
  - 対応関係があり、網羅されていることが必要
    - 上→下
    - 仕様書→試験項目
  - 必ずしも一対一でなくても良い


