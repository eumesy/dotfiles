(* ML interpreter / type reconstruction *)
type id = string
;;

type binOp =
  Plus | Mult | Lt
      
(* Ex.3.3 And, Or *)
| And | Or
;;

type exp =
  Var of id
| ILit of int
| BLit of bool
| BinOp of binOp * exp * exp
| IfExp of exp * exp * exp
    
(* Ex.3.4 letº∞ *)
| LetExp of id * exp * exp
    
(* Ex.3.8 *)
| FunExp of id * exp			
| AppExp of exp * exp

(* Ex.3.14 let recº∞*)
| LetRecExp of id * id * exp * exp
;;

type program = 
  Exp of exp
      
(* Ex.3.4 let¿Î∏¿ *)
| Decl of id * exp
    
(* Ex.3.14 let rec¿Î∏¿*)
| RecDecl of id * id * exp
;;
