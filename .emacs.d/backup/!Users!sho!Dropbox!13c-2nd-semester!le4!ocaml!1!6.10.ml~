(* 6.10 *)

type ('a, 'b) sum = Left of 'a | Right of 'b;;

let float_of_int_or_float = function
  | Left i  -> float_of_int i
  | Right f -> f;;
(*
val float_of_int_or_float : (int, float) sum -> float = <fun>
*)


(*********************************************)
(* 1. *)

(* [解答] *)
let sum1 (x, y) =
  match y with
    Left l  -> Left (x, l)
  | Right r -> Right (x, r);;

(*
  val sum1 : 'a * ('b, 'c) sum -> ('a * 'b, 'a * 'c) sum = <fun>
*)


(*********************************************)
(* 2. *)

(* [解答] *)
let sum2 (x, y) =
  match (x, y) with
  | (Left a,  Left c)  -> Left  (Left  (a, c))
  | (Left a,  Right d) -> Right (Left  (a, d))
  | (Right b, Left c)  -> Right (Right (b, c))
  | (Right b, Right d) -> Left  (Right (b, d));;

(*
  val sum2 :
  ('a, 'b) sum * ('c, 'd) sum ->
  (('a * 'c, 'b * 'd) sum, ('a * 'd, 'b * 'c) sum) sum = <fun>
*)


(*********************************************)
(* 3. *)

(* [解答] *)
let sum3 x y =
  match y with
  | Left a  -> (fst x) a
  | Right c -> (snd x) c;;

(*
  val sum3 : ('a -> 'b) * ('c -> 'b) -> ('a, 'c) sum -> 'b = <fun>
*)


(*********************************************)
(* 4. *)
let sum4 = fun x ->
  ((fun y -> (x (Left y))), (fun z -> (x (Right z))));;

(*
  val sum4 : (('a, 'b) sum -> 'c) -> ('a -> 'c) * ('b -> 'c) = <fun>
*)


(*********************************************)
(* 5. *)
let sum5 = fun x -> fun y ->
  match x with
  | Left  z -> Left  (z y)
  | Right w -> Right (w y);;

(*
  val sum5 : ('a -> 'b, 'a -> 'c) sum -> 'a -> ('b, 'c) sum = <fun>
*)
