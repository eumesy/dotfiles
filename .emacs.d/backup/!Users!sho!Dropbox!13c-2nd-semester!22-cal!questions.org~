* 131022 1 Basics 前半 <コメント欄>
[質問]
Fixpoint で再帰的関数を定義する際、(decreasing in nth argument) とメッセージが出ます。
これについて、講義中「第n引数がどんどん"減って"」いると説明がありましたが、これは、
「コンストラクタが外れていく」という意味で合っていますか？
＝型定義において、コンストラクタは常に付与する（増やす）もの、という認識で良いでしょうか？
[感想]
翌週のレジュメを配布して頂くのは、予習に取り組みやすく、ありがたいです。

* 131022 2 Basics 後半、Induction <質問票>

* 131029 2 Basics 後半、Induction <コメント欄>
evenb （Oに向けて再帰していく事で偶数判定） は、計算量的に、とても「使える」ものに見えません。
再帰の練習として用いているだけなのでしょうか。
それとも、プログラムの「証明可能性」と「高速性」は、ある意味でトレードオフなのでしょうか。

* 131112 3 Lists <コメント欄>
hd_opt で、match によって引数の l:natlist を場合分けする際、「(1)h::t (2)Nil」の順で場合分けすると定義できるのですが、「(1)Nil (2)h::t」の順で場合分けすると redundant だと怒られます。これはどういう事なのでしょうか。

* 131119 4 Poly <コメント欄>
- combine の逆関数(?) split を作る際、局所的な再期関数 body を用意しました。強引な気がしますし、想定されていた解のようにも思えません。想定されていた解法がどのようなものであったか教えて頂きたいです。
- 型パラメータ「forall X : Type,」について、引数のように型を与える場合と与えない場合の違いはどこにあるのでしょうか。下のふたつのケースの違いをどう捉えれば良いのかが分かりません。
  - コンストラクタをコンストラクタとして扱う場合は型を引数のように持たせる必要があるが e.g.「nil nat」
  - match でコンストラクタによるパターンマッチする場合は型を引数のように持たせてはならない e.g.「× nil X」

* 質問
** 1 Basics 前半
・簡約で証明 簡約は一意？
・Eval simpl in (next_weekday (next_weekday saturday)). (* 関数評価も関数そのものも記法同じ? *)
(*引数を書いたら関数適用? *)
・simpl compute違い気になる
・nat、元々あるものを更に上書きしている？
・evenb （レジュメ p.57）とても「使える」ものには見えない
  練習として使っているだけ？
  それとも、プログラミング言語の「証明可能」と「高速」はトレードオフ？
・Notationのnat_scopeなに？

** 2 Basics 後半
intros は、**定理のこと？
・Case "n = 0"より =O の方が良い気が
・plus_O、plus_0 気持ち悪い…

intros n. 型だけ仮定した変数を仮定におく？

-> を使う対象は決められないの?

** Induction
これは背理法??
  false = true, b = false -> b = true

・〜定理？

・過去二つとか、過去全部を引き継ぐ帰納法は無い??

** Lists
hd_opt
  Nilを後から出さないとredunduntになるのは何事…

帰納法＝好きにコンストラクタを付けてよい の証明 (in Coq) ということ？

nonzeros_app、0だからnで場合分けできたけれど、そうでない場合分けは？
いちいち新しい型を用意しないといけない？

- natoption 使っても、結局受取り手が場合分けするのだよね
  Null Pointer に対してどういうメリットがあるのだろう

** Poly
- なぜ check list. は forall 付かない?
- nil の引数?
  - nil nat とは何?
  - fixpoint length
  - レジュメ p.13
- "X" にしなきゃいけない?
- 証明中で match のような場合分けはできない?

- nil
     : forall X : Type, list X <-これ何????
  分からん...

length の match でも nil/cons 単体で使ってるのだよね...
-> これはtype入れると怒られる

nil nat は nat 必要

e  grumble true型?!



* todo
・大谷氏解答と見合わせたい

* 感想など
** 1
・講義の裏テーマ 証明＝プログラム 触れて欲しい
