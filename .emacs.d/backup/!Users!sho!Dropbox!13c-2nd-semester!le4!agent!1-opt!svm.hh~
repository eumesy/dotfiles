#ifndef SVM_HH
#define SVM_HH

enum ktype {LINEAR, POLYNOMIAL, GAUSS, SIGMOID};

typedef struct ks {
  enum ktype kernel_type; // カーネルの種類
  int param_d; // 多項式カーネルのパラメータd
  double param_s; // Gaussカーネルのパラメータ\sigma
  double param_a; // シグモイドカーネルのパラメータa
  double param_b; // シグモイドカーネルのパラメータb
} *kernel;

struct DiscFuncParams {
  std::vector<std::vector<double> > x_training;
  std::vector<int> y_training;
  std::vector<double> alph;
  double theta;
};

void read_data(std::vector<std::vector<double> >& x, std::vector<int>& y, std::istream &file);
void solve_quad_problem(std::vector<std::vector<double> >& x, std::vector<int>& y, std::vector<double>& alph, kernel k);
double calc_theta(std::vector<std::vector<double> >& x, std::vector<int>& y, std::vector<double>& alph, kernel k);

int discriminant_func(std::vector<double> &x, kernel k, DiscFuncParams &p);

int disc_func(std::vector<std::vector<double> >& x_training, std::vector<int>& y_training, std::vector<double>& alph, double theta, std::vector<double>& x, kernel k);

void print_function(std::vector<std::vector<double> >& x, std::vector<int>& y, std::vector<double>& alph, double theta, kernel k);

#endif // #define SVM_HH
