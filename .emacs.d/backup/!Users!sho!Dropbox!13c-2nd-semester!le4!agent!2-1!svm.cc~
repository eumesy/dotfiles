#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "QuadProg++.hh"

using namespace std;

// kernel
int kernel; // カーネルの種類
int param_d; // 多項式カーネルのパラメータd
double param_s; // Gaussカーネルのパラメータ\sigma
double param_a; // シグモイドカーネルのパラメータa
double param_b; // シグモイドカーネルのパラメータb

// 予測精度の評価(交差検定)
int num_of_parts; // 与えられたデータの分割数(交差検定)

// quadratic programming problem
const double diag_component_rev = 1.0e-7; // QuadProg++ に与えるGの対角成分の補正値
const double sv_threshold = 1.0e-8; // Lagrange 乗数を無視する閾値


// calc vector
double inner_product_v(vector<double>& v1, vector<double>& v2);
vector<double> c_v(double c, vector<double>& v);
vector<double> plus_v(vector<double>& v1, vector<double>& v2);
vector<double> minus_v(vector<double>& v1, vector<double>& v2);
double norm_square_v(vector<double>& v);

// calc kernel
double kernel_0(vector<double>& x1, vector<double>& x2);
double kernel_1(vector<double>& x1, vector<double>& x2);
double kernel_2(vector<double>& x1, vector<double>& x2);
double kernel_3(vector<double>& x1, vector<double>& x2);
double (*kernel_func[4])(vector<double>&, vector<double>&) =
{ kernel_0, kernel_1, kernel_2, kernel_3 };

// read data
void read_data(vector<vector<double> >& x, vector<int>& y);
void alert_arg();

// solve quadratic programming problem
void solve_quad_problem(vector<vector<double> >& x, vector<int>& y, vector<double>& alph);

// calc theta
double calc_theta(vector<vector<double> >& x, vector<int>& y, vector<double>& alph);

// discriminant function
int disc_func(vector<vector<double> >& x_training, vector<int>& y_training, vector<double>& alph, double theta, vector<double>& x);

// print function
void print_function(vector<vector<double> >& x, vector<int>& y, vector<double>& alph, double theta);

// cross validation
double cross_validation(vector<vector<double> >& x, vector<int>& y);


int main(int argc, char *const argv[]) {
  // check params
  if (argc < 2+1) {
	alert_arg();
  }
  num_of_parts = atoi(argv[1]);
  kernel = atoi(argv[1+1]);
  switch (kernel) {
  case 0: { // 線形カーネル
	break;
  }
  case 1: { // 多項式カーネル
	if (argc != 3+1) alert_arg();
	param_d = atoi(argv[2+1]);
	break;
  }
  case 2: { // Gaussカーネル
	if (argc != 3+1) alert_arg();
	param_s = atoi(argv[2+1]);
	break;
  }
  case 3: { // シグモイドカーネル
	if (argc != 4+1) alert_arg();
	param_a = atoi(argv[2+1]);
	param_b = atoi(argv[3+1]);
	break;
  }
  }

  // read data
  vector<vector<double> > x_given;
  vector<int> y_given;
  read_data(x_given, y_given);

  // 1-2
  // cross validation
  printf ("%f\n", cross_validation(x_given, y_given));

  // 1-1
  // int given_set_size = x_given.size(); // 学習データの個数
  // // solve quadratic programming problem
  // vector<double> alph(given_set_size);
  // solve_quad_problem(x, y, alph);
  // // make discriminant function
  // double theta = calc_theta(x, y, alph);
  // // print function
  // print_function(x, y, alph, theta);

  return 0;
}

// calc vector
double inner_product_v(vector<double>& v1, vector<double>& v2) {
  int dim_v1 = v1.size();
  int dim_v2 = v2.size();
  int dim = min(dim_v1, dim_v2);

  double ret = 0;
  for (int i=0; i<dim; i++)	{
	ret += v1[i] * v2[i];
  }
  return ret;
}
vector<double> c_v(double c, vector<double>& v) {
  int dim = v.size();
  vector<double> vec(dim);
  
  for (int i=0; i<dim; i++) vec[i] = c * v[i];
  return vec;
}
vector<double> plus_v(vector<double>& v1, vector<double>& v2) {
  int dim_v1 = v1.size();
  int dim_v2 = v2.size();
  int dim = min(dim_v1, dim_v2);

  vector<double> vec(dim);
  for (int i=0; i<dim; i++) vec[i] = v1[i] + v2[i];
  return vec;
}  
vector<double> minus_v(vector<double>& v1, vector<double>& v2) {
  int dim_v1 = v1.size();
  int dim_v2 = v2.size();
  int dim = min(dim_v1, dim_v2);

  vector<double> vec(dim);
  for (int i=0; i<dim; i++) vec[i] = v1[i] - v2[i];
  return vec;
}
double norm_square_v(vector<double>& v) {
  int dim = v.size();
  double sum = 0.0;
  for (int i=0; i<dim; i++) sum += v[i] * v[i];
  return sum;
}

// calc kernel
double kernel_0(vector<double>& x1, vector<double>& x2) {
  return inner_product_v(x1, x2);
}
double kernel_1(vector<double>& x1, vector<double>& x2) {
  double inner = 1 + inner_product_v(x1, x2);
  double product = 1.0;
  for (int i=0; i<param_d; i++) {
	product = product * inner;
  }
  return product;
}
double kernel_2(vector<double>& x1, vector<double>& x2) {
  vector<double> v;
  v = minus_v(x1, x2);
  return exp(- norm_square_v(v) / (2.0 * param_s * param_s));
}
double kernel_3(vector<double>& x1, vector<double>& x2) {
  return tanh(param_a * inner_product_v(x1, x2) + param_b);
}

// read data
void read_data(vector<vector<double> >& x, vector<int>& y) {
  string line;
  double d;
  vector<double> vec;
  int dim; // 特徴ベクトル空間の次元

  dim = 0;
  while (getline(cin, line)) {
	vec.clear();
	istringstream iss(line);

	if (dim == 0) {	// 1行目
	  while (iss >> d) {
		vec.push_back(d);
	  }
	  dim = vec.size() - 1;
	  y.push_back(vec[dim]);
	  vec.pop_back();
	  x.push_back(vec);
	}
	else {
	  for (int i=0; i<dim; i++) {
		iss >> d;
		vec.push_back(d);
	  }
	  x.push_back(vec);

	  iss >> d;
	  y.push_back(d);
	}
  }
}
void alert_arg() {
  fprintf(stderr, "第1引数でカーネルの種類を、以後の引数でパラメータを過不足なく指定して実行してください\n");
  fprintf(stderr, "- 線型カーネル (内積. カーネルトリック無し)\n");
  fprintf(stderr, "    ===> 第1引数:0\n");
  fprintf(stderr, "- 多項式カーネル\n");
  fprintf(stderr, "    ===> 第1引数:1, 第2引数:パラメータd\n");
  fprintf(stderr, "- Gaussカーネル\n");
  fprintf(stderr, "    ===> 第1引数:1, 第2引数:パラメータ\\sigma\n");
  fprintf(stderr, "- シグモイドカーネル\n");
  fprintf(stderr, "    ===> 第1引数:1, 第2引数:パラメータa, 第3引数:パラメータb\n");
  exit(1);
}

// solve quadquadratic programming problem
void solve_quad_problem(vector<vector<double> >& x, vector<int>& y, vector<double>& alph) {
  double G[MATRIX_DIM][MATRIX_DIM], g0[MATRIX_DIM], 
	CE[MATRIX_DIM][MATRIX_DIM], ce0[MATRIX_DIM], 
	CI[MATRIX_DIM][MATRIX_DIM], ci0[MATRIX_DIM],
	alph_arr[MATRIX_DIM];
  int n; // 未知数(Lagrange乗数)の数 = 学習データの数
  int m; // 制約条件(等式)の本数
  int p; // 制約条件(不等式)の本数
  double sum = 0.0;

  n = x.size(); // 未知数(Lagrange乗数)の次元

  // G
  for (int i=0; i<n; i++) {
	for (int j=0; j<n; j++) {
	  G[i][j] = y[i] * y[j] * (kernel_func[kernel])(x[i], x[j]);
	  if (i == j) G[i][j] += diag_component_rev;
	}
  }

  // g0
  for (int i=0; i < n; i++)
	g0[i] = -1.0;

  // 制約条件(等式)
  m = 1; // 制約条件(等式)の本数
  // CE
  for (int i=0; i < n; i++) {
	for (int j=0; j < m; j++) {
	  CE[i][j] = y[i];
	}
  }
  // ce0
  for (int j=0; j < m; j++)
	ce0[j] = 0.0;

  // 制約条件(不等式)
  p = n; // 制約条件(不等式)の本数
  // CI
  for (int i = 0; i < n; i++) {
	for (int j = 0; j < p; j++) {
	  if (i == j) CI[i][j] = 1.0;
	  else  CI[i][j] = 0.0;
	}
  }
  // ci0
  for (int j = 0; j < p; j++)
	ci0[j] = 0.0;

  double f;
  f = solve_quadprog(G, g0, n, CE, ce0, m, CI, ci0, p, alph_arr);
  // fprintf(stderr, "f: %f\n", f);

  for (int i=0; i<n; i++)
	alph[i] = alph_arr[i];
}

// calc theta
double calc_theta(vector<vector<double> >& x, vector<int>& y, vector<double>& alph) {
  int set_size = min(min(x.size(), y.size()), alph.size());

  // suport vector
  int sv_index = 0;
  for (int i=0; i<set_size; i++)
	if (alph[i] > alph[sv_index]) sv_index = i;

  // theta
  double theta = 0.0;
  for (int i=0; i<set_size; i++) {
	if (fabs(alph[i]) > sv_threshold) {
	  theta += alph[i] * y[i] * (kernel_func[kernel])(x[i], x[sv_index]);
	}
  }
  theta -= y[sv_index];

  return theta;
}

// discriminant function
int disc_func(vector<vector<double> >& x_training, vector<int>& y_training, vector<double>& alph, double theta, vector<double>& x) {
  int training_data_size = min(min(x_training.size(), y_training.size()), alph.size());
  
  double f = 0.0;
  for (int i=0; i<training_data_size; i++) {
  	if (fabs(alph[i]) > sv_threshold) {
  	  f += alph[i] * y_training[i] * (kernel_func[kernel])(x_training[i], x);
  	}
  }
  f -= theta;
  return (f >= 0) ? 1 : -1;
}

// cross validation
double cross_validation(vector<vector<double> >& x_given, vector<int>& y_given) {
  int given_set_size = min(x_given.size(), y_given.size());
  
  // partition begining index
  vector<int> part_begin(num_of_parts); 
  for (int i=0; i<=num_of_parts; i++)
  	part_begin[i] = (given_set_size * i) / num_of_parts;
  part_begin.push_back(given_set_size);
  
  vector<vector<double> > x_training;
  vector<vector<double> > x_test;
  vector<int> y_training;
  vector<int> y_test;
  int training_set_size;
  int test_set_size;

  vector<double> alph_training;
  double theta_training;

  int num_of_test = 0;
  // number of times SVMs determine test data correctly
  int num_of_success = 0;
  
  for (int i=0; i<num_of_parts; i++) {
	// make a temporal training set and a temporal test set
    test_set_size = part_begin[i+1] - part_begin[i];
    training_set_size = given_set_size - test_set_size;

	// 十分なデータが含まれていなければ終了
	if (training_set_size <= 2)
	  continue;
	if (test_set_size == 0)
	  continue;

	// divide given y into training set and a test set
	y_training.clear();
	y_test.clear();
	
	y_training.insert(y_training.end(),  y_given.begin(),                   y_given.begin() + part_begin[i]);
	y_test.insert(    y_test.begin(),    y_given.begin() + part_begin[i],   y_given.begin() + part_begin[i+1]);
	y_training.insert(y_training.end(),  y_given.begin() + part_begin[i+1], y_given.end());

	// training set に正負両方のクラスのデータが含まれて居なければ終了
	bool pos_data_exists = false;
	bool neg_data_exists = false;
	for (int j=0; j<training_set_size; j++) {
	  if (y_training[j] == 1)
		pos_data_exists = true;
	  else
		neg_data_exists = true;

	  if (pos_data_exists && neg_data_exists)
		break;
	}
	if (!pos_data_exists || !neg_data_exists)
	  continue;

	// divide given x into a training set and a test set
	x_training.clear();
	x_test.clear();
	
	x_training.insert(x_training.end(),  x_given.begin(),                   x_given.begin() + part_begin[i]);
	x_test.insert(    x_test.begin(),    x_given.begin() + part_begin[i],   x_given.begin() + part_begin[i+1]);
	x_training.insert(x_training.end(),  x_given.begin() + part_begin[i+1], x_given.end());

	// make a discriminal function
	// solve quadratic programming problem with tempral training set
	alph_training.clear();
	alph_training.resize(training_set_size);
	solve_quad_problem(x_training, y_training, alph_training);

	theta_training = calc_theta(x_training, y_training, alph_training);

	// check the discriminal function with tempral test set
	for (int j=0; j<test_set_size; j++) {
	  if (disc_func(x_training, y_training, alph_training, theta_training, x_test[j]) == y_test[j]) {
		num_of_test++;
		num_of_success++;
	  }
	  else {
		num_of_test++;
	  }
	}
  }

  if (num_of_test == 0)
	return 0;
  else
	return num_of_success / (num_of_test * 1.0);
}

// print function
void print_function(vector<vector<double> >& x, vector<int>& y, vector<double>& alph, double theta) {
  int given_set_size = min(x.size(), y.size());
  vector<double> alpha_y(given_set_size);
  for (int i=0; i<given_set_size; i++)
	alpha_y[i] = alph[i] * y[i];

  printf("f(x,y) = ");
  switch (kernel) {
  case 0: { // 線形カーネル
	for (int i=0; i<given_set_size; i++) {
	  if (fabs(alph[i]) > sv_threshold) {
		printf("(%.15e) * ((%.15e) * x + (%.15e) * y) + \\\n", alpha_y[i], x[i][0], x[i][1]);
	  }
	}
	
	break;
  }
  case 1: { // 多項式カーネル
	for (int i=0; i<given_set_size; i++) {
	  if (fabs(alph[i]) > sv_threshold) {
		printf("(%.15e) * (1 + (%.15e) * x + (%.15e) * y)**%d + \\\n", alpha_y[i], x[i][0], x[i][1], param_d);
	  }
	}
	break;
  }
  case 2: { // Gaussカーネル
	double denom = 2.0 * param_s * param_s;
	for (int i=0; i<given_set_size; i++) {
	  if (fabs(alph[i]) > sv_threshold) {
		printf("(%.15e) * exp( - (((%.15e) - x)**2 + ((%.15e) - y)**2) / %.15e) + \\\n", alpha_y[i], x[i][0], x[i][1], denom);
	  }
	}
	break;
  }
  case 3: { // シグモイドカーネル
	for (int i=0; i<given_set_size; i++) {
	  if (fabs(alph[i]) > sv_threshold) {
		printf("(%.15e) * tanh((%lf) * ((%.15e) * x + (%.15e) * y) + (%lf))  + \\\n", alpha_y[i], param_a, x[i][0], x[i][1], param_b);
	  }
	}
	break;
  }
  } // switch
  printf("(%.15e)\n", - theta);

  for (int i=0; i<given_set_size; i++)
	printf("# alph[%d] = %f\n", i, alph[i]);
  
  printf("# theta = %f\n", theta);
}
